% \iffalse meta-comment
%
% Copyright (C) 2012 by Matthias Pospiech <matthias@pospiech.eu>
% ---------------------------------------------------------------------------
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Matthias Pospiech.
%
% This work consists of the files templatetools.dtx and templatetools.ins
% and the derived filebase templatetools.sty.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{templatetools.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{templatetools}
%<*package>
    [2012/06/01 v0.1 Collection of conditional commands useful inside templates]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{templatetools}[2012/06/01]
\EnableCrossrefs
\CodelineIndex
\RecordChanges

%%% Font packages
\usepackage{cmap} 
\usepackage[T1]{fontenc} % T1 Schrift Encoding
\usepackage{lmodern}
%%% Additional packages
\usepackage{soulutf8}
\usepackage[table]{xcolor}
\usepackage{enumitem}
\usepackage{tabu}
%%% listings
\input{preamble/listings-latex.tex}
%%% hyperref
\input{preamble/setup-hyperref.tex}
%%% color setup
% table colors 
\colorlet{tablebodycolor}{white!100}
\colorlet{tablerowcolor}{gray!10}
\colorlet{tableheadcolor}{gray!25}
%%% Set document layout / variables
\setlength{\parindent}{0pt}
\setlength{\parskip}{0.5\baselineskip}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
%%% doc commands
\input{preamble/setup-doc-commands.tex}

\begin{document}
  \DocInput{templatetools.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{272}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2012/06/01}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \providecommand*{\url}{\texttt}
% \GetFileInfo{templatetools.dtx}
% \title{The \textsf{templatetools} package}
% \author{Matthias Pospiech \\ \url{matthias@pospiech.eu}}
% \date{\fileversion~from \filedate}
%
%\maketitle
\begin{abstract}\noindent
Collection of tools, which are helpful for the creation of a \LaTeX{} template 
if conditional paths for code execution are required. Most of them are already
available from other packages, so that this package only provides a wrapper
with a unique code style. 
\end{abstract}
\tableofcontents

%
% \section{Introduction}
%
% Put text here.
%
% \section{Usage}
%
% \subsection{commands}
% The following commands are all wrappers to \cs{ifcsdef} with only
%  mandatory options:
%
%
% \DescribeMacro{\IfDefined} \marg{command}\marg{code} 
% Executes the code if the command is defined. 
%
%
% \DescribeMacro{\IfUndefined} \marg{command}\marg{code}  
% Executes the code if the command is not defined.
%
%
% \DescribeMacro{\IfElseDefined} \marg{command}\marg{defined}\marg{undefined}
% Executes either the the code in the first brackets if the command is defined 
%%% or the second brackets if the code is undefined.
%
% \DescribeMacro{\IfElseUndefined} \marg{command}\marg{undefined}\marg{defined}
% As \cs{IfElseDefined}, but with switched brackets for defined and undefined.
%
%
% \subsubsection{Example}
% The \cs{usepackage} code is only executed if the required \cs{upmu} command
% is defined.
% \iffalse
%<*example>
% \fi
\begin{lstlisting}[style=demostyle]
% Requires: Command \upmu
\IfDefined{upmu}{\usepackage[upmu]{gensymb}}
\end{lstlisting}
% \iffalse
%</example>
% \fi
%
%
% \DescribeMacro{\IfMultDefined} \marg{list of commands}
% \marg{defined}\marg{undefined}
% Checks a comma separated list of commands before it executes the defined
% code path if all commands were defined or the undefined code path else.
%
% \subsubsection{Example}
% \iffalse
%<*example>
% \fi
\begin{lstlisting}[style=demostyle]
% Requires: Command longtable and rowcolors
\IfMultDefined{longtable,rowcolors}
  {... longtable with rowcolors ...}
  {Error: Neither longtable nor rowcolors are defined}
\end{lstlisting}
% \iffalse
%</example>
% \fi
%
% \subsection{Draft mode}
%
% \DescribeMacro{\IfNotDraft}
%
%
% \DescribeMacro{\IfNotDraftElse}
%
%
% \DescribeMacro{\IfDraft}
%
% \subsection{Packages}
%
% \DescribeMacro{\IfPackageLoaded}
%
%
% \DescribeMacro{\IfPackageNotLoaded}
%
%
% \DescribeMacro{\IfPackagesLoaded}
%
%
% \DescribeMacro{\IfPackagesNotLoaded}
%
%
% \subsection{Package Loading order}
% In \latex{} documents it is quite often essential
% to load packges in the right order to. However this makes
% it impossible to group similar packages together.
%
% The following commands allow to execute code after or before a 
% specified package and thus also load packages in a specified order
% using \cs{usepackage} commands.
%
% If the package was not loaded in the document at all
% the code will be executed before \texttt{\cs{begin}\{document\}}
%
% The code is based on \package{scrlfile} (Koma Script).
% 
% \DescribeMacro{\ExecuteAfterPackage}
% \marg{after this package}\marg{execute this code}
%
% \DescribeMacro{\ExecuteBeforePackage}
% \marg{before this package}\marg{execute this code}
%
% \subsubsection{Example}
% \package{cleveref} package must be loaded after package \package{hyperref}.
%
% \iffalse
%<*example>
% \fi
\begin{lstlisting}[style=demostyle]
% loading: must be loaded after hyperref and after varioref
\ExecuteAfterPackage{hyperref}{
% caption and cleveref incompatible in Versions before 2011/12/24
  \usepackage{cleveref}[2011/12/24]
}
\end{lstlisting}
% \iffalse
%</example>
% \fi
%
% \subsection{Tikz Library}
%
% \DescribeMacro{\IfTikzLibraryLoaded}
%
% \subsection{Column types}
%
% \LaTeX{} provides no tool to check for the existence of a column type. 
% This is provided by the following command:
%
% \DescribeMacro{\IfColumntypeDefined}\marg{columntype character}\marg{is 
% defined}\marg{is undefined}
%
% which is also available as a command checking a comma separated list for 
% column type characters
%
% \DescribeMacro{\IfColumntypesDefined}
% \marg{columntype character list}\marg{is defined}\marg{is undefined}
%
%
% \subsection{Color definitions}
%
% Color definitions are saved in \latex{} as names. The following commands
% provide a covinient way to check the existens of these color definitions
%
% \DescribeMacro{\IfColorDefined}
%    {#2} % color string is defined
    {#3}} % color string is not defined

% \DescribeMacro{\IfColorsDefined}
%
% \subsection{Math version}
%
% \DescribeMacro{\IfMathVersionDefined}
%
% \subsection{Template Definitions}
% The following commands in principle define only macros. However these are 
% saved using two keys named \emph{group} and \emph{property}. These macros 
% can the be executed with these key. This way these macros are provided in 
% a well readable syntax and the group key give it an object like touch.
%
% They were created in the first place to have switches for properties in a
% template which require multi line macros.
%
% \DescribeMacro{\SetTemplateDefinition} \marg{Group}\marg{Property}\marg{Code}
% Defines a collection of commands (a macro) with a \emph{group} and 
% \emph{property}.
%
% \DescribeMacro{\UseDefinition} \marg{Group}\marg{Property} 
% Execute macro save with the \emph{group} and \emph{property}.
%
% \subsection{Example}
% The following code allows to switch the colors anywhere in the document:
%
% \iffalse
%<*example>
% \fi
\begin{lstlisting}[style=demostyle]
\SetTemplateDefinition{Target}{Web}{%
  \definecolor{pdfurlcolor}{rgb}{0,0,0.6}
}%
\SetTemplateDefinition{Target}{Print}{%
  \definecolor{pdfurlcolor}{rgb}{0,0,0}
}%
% Apply colors for web
\UseDefinition{Target}{Web}
\end{lstlisting}
% \iffalse
%</example>
% \fi
%
% \StopEventually{}
%
% \section{Implementation}
%
% \iffalse
%<templatetools.sty>
% \fi
%
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/12/01]
\ProvidesPackage{templatetools}
          [2012/06/01 v0.1 Collection of conditional commands useful inside templates]
%    \end{macrocode}
%    \begin{macrocode}
%%% --- Necessary Packages
%%% ------------------------------------------------------------------
\RequirePackage{ifpdf}
\RequirePackage{etoolbox}
\RequirePackage{ltxcmds}
\RequirePackage{array} % for column types
\RequirePackage{ifdraft} % check draft
\RequirePackage{scrlfile}
%    \end{macrocode}
%
% \subsection{command sequences}
%
%    \begin{macrocode}
%%% --- Check if command is defined
%%% ------------------------------------------------------------------
%    \end{macrocode}
%
%
% \begin{macro}{\IfDefined}
%    \begin{macrocode}
\newcommand{\IfDefined}[2]{\ifcsdef{#1}{#2}{}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfUndefined}
%    \begin{macrocode}
\newcommand{\IfUndefined}[2]{\ifcsdef{#1}{}{#2}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfElseDefined}
%    \begin{macrocode}
\newcommand{\IfElseDefined}[3]{\ifcsdef{#1}{#2}{#3}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfElseUndefined}
%    \begin{macrocode}
\newcommand{\IfElseUndefined}[3]{\ifcsdef{#1}{#3}{#2}}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfMultDefined}
% check if more than one command is defined
%    \begin{macrocode}
\newcommand{\IfMultDefined}[1]{%
  \@tempswatrue
  \def\do##1{%
%% define \@tempa with trimmed index element.
    \edef\@tempa{\zap@space##1 \@empty}%
%% check if package of current index is loaded
    \ifcsdef{\@tempa}{}{\@tempswafalse}%
  }%
%% Process csv list with command \do (etoolbox)
  \docsvlist{#1}%
%% does what ??
  \if@tempswa\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{draft mode}
%
%    \begin{macrocode}
% ------------------------------------------------------------------
% Check for 'draft' mode - commands.
% ------------------------------------------------------------------
%    \end{macrocode}
%
% \begin{macro}{\IfNotDraft}
%    \begin{macrocode}
\newcommand{\IfNotDraft}[1]{\ifx\@draft\@undefined #1 \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfNotDraftElse}
%    \begin{macrocode}
\newcommand{\IfNotDraftElse}[2]{\ifx\@draft\@undefined #1 \else #2 \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfDraft}
%    \begin{macrocode}
\newcommand{\IfDraft}[1]{\ifx\@draft\@undefined \else #1 \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{packages}
%
%    \begin{macrocode}
% ------------------------------------------------------------------
% Check load status of packages
% ------------------------------------------------------------------
%    \end{macrocode}
%
%
% \begin{macro}{\IfPackageLoaded}
%    \begin{macrocode}
\newcommand{\IfPackageLoaded}[2]{\ltx@ifpackageloaded{#1}{#2}{}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfPackageNotLoaded}
%    \begin{macrocode}
\newcommand{\IfPackageNotLoaded}[2]{\ltx@ifpackageloaded{#1}{}{#2}}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\let\IfElsePackageLoaded\ltx@ifpackageloaded
%    \end{macrocode}
%
% \begin{macro}{\IfPackagesLoaded}
% check list of packages
%    \begin{macrocode}
\newcommand{\IfPackagesLoaded}[1]{%
  \@tempswatrue
  \def\do##1{%
    \edef\@tempa{\zap@space##1 \@empty}%
    \ltx@ifpackageloaded{\@tempa}{}{\@tempswafalse}%
  }%
  \docsvlist{#1}%
  \if@tempswa\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfPackagesNotLoaded}
%    \begin{macrocode}
\newcommand{\IfPackagesNotLoaded}[1]{%
  \@tempswatrue
  \def\do##1{%
    \edef\@tempa{\zap@space##1 \@empty}%
    \ltx@ifpackageloaded{\@tempa}{\@tempswafalse}{}%
  }%
  \docsvlist{#1}%
  \if@tempswa\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ExecuteAfterPackage}
%    \begin{macrocode}
\newcommand{\ExecuteAfterPackage}[2]{%
%% #1: after this package
%% #2: code to execute
  \AfterAtEndOfPackage{#1}{
    #2%
  }
  \AtEndPreamble{%
    \IfPackageNotLoaded{#1}{%
     #2%
    }
  }
} 
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ExecuteBeforePackage}
%    \begin{macrocode}
\newcommand{\ExecuteBeforePackage}[2]{%
%% #1: before this package
%% #2: code to execute
  \BeforePackage{#1}{
    #2%
  }
  \AtEndPreamble{%
    \IfPackageNotLoaded{#1}{%
     #2%
    }
  }
} 
%    \end{macrocode}
% \end{macro}
%
% \subsection{tikz library}
%
%    \begin{macrocode}
% ------------------------------------------------------------------
% Check if tikz library is loaded
%    \end{macrocode}
%
%
% \begin{macro}{\IfTikzLibraryLoaded}
%    \begin{macrocode}
\def\IfTikzLibraryLoaded#1{%
  \ifcsname tikz@library@#1@loaded\endcsname
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{column types in tables}
%
%    \begin{macrocode}
% ------------------------------------------------------------------
% table columns
% ------------------------------------------------------------------
%    \end{macrocode}
%
% Create list of predefined columntypes
%    \begin{macrocode}
\expandafter\let\csname columntype@l\endcsname\@empty
\expandafter\let\csname columntype@c\endcsname\@empty
\expandafter\let\csname columntype@r\endcsname\@empty
\expandafter\let\csname columntype@p\endcsname\@empty
\expandafter\let\csname columntype@m\endcsname\@empty
\expandafter\let\csname columntype@b\endcsname\@empty
\expandafter\let\csname columntype@@\endcsname\@empty
\expandafter\let\csname columntype@!\endcsname\@empty
\expandafter\let\csname columntype@|\endcsname\@empty
\expandafter\let\csname columntype@<\endcsname\@empty
\expandafter\let\csname columntype@>\endcsname\@empty
\expandafter\let\csname columntype@=\endcsname\@empty
%    \end{macrocode}
%
% \begin{macro}{\CheckIfColumntypeDefined}
%    \begin{macrocode}
\newcommand\CheckIfColumntypeDefined[1]{%
  \providebool{tpl@coltype@#1}
  \ifcsdef{NC@find@\string#1}%
    {\setbool{tpl@coltype@#1}{true}}%
    {\ifcsdef{columntype@\string#1}
      {\setbool{tpl@coltype@#1}{true}}%
      {\setbool{tpl@coltype@#1}{false}}%
    }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\isColumntypeDefined}
%    \begin{macrocode}
\newcommand\isColumntypeDefined[1]{tpl@coltype@#1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfColumntypeDefined}
%    \begin{macrocode}
\newcommand\IfColumntypeDefined[3]{%
  \CheckIfColumntypeDefined{#1}
  \ifboolexpr{ bool{\isColumntypeDefined{#1}} }{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfColumntypesDefined}
%    \begin{macrocode}
\newcommand{\IfColumntypesDefined}[1]{%
  \@tempswatrue
  \def\do##1{%
    \edef\@tempa{\zap@space##1 \@empty}%
%% check if column is defined.
%%   Here with \expandafter because of the \string definition 
%%   in \CheckIfColumntypeDefined. 
    \expandafter\IfColumntypeDefined
        \expandafter{\@tempa}{}{\@tempswafalse}
  }%
  \docsvlist{#1}%
  \if@tempswa\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{color definitions}
%
%    \begin{macrocode}
% ------------------------------------------------------------------
% test color definitions
% ------------------------------------------------------------------
%    \end{macrocode}
%
%
% \begin{macro}{\IfColorDefined}
% Tests if a color is defined
%    \begin{macrocode}
\newcommand{\IfColorDefined}[3]{%
  \ifcsdef{\string\color @#1}
    {#2} % color string is defined
    {#3}} % color string is not defined
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\IfColorsDefined}
%    \begin{macrocode}
\newcommand{\IfColorsDefined}[1]{%
  \@tempswatrue
  \def\do##1{%
    \edef\@tempa{\zap@space##1 \@empty}%
    \expandafter\IfColorDefined
        \expandafter{\@tempa}{}{\@tempswafalse}
  }%
  \docsvlist{#1}%
  \if@tempswa\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi%
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{math version}
%
%    \begin{macrocode}
% ------------------------------------------------------------------
% test math versions
% ------------------------------------------------------------------
%    \end{macrocode}
%
%
% \begin{macro}{\IfMathVersionDefined}
%    \begin{macrocode}
\newcommand{\IfMathVersionDefined}[3]{\ifcsdef{mv@#1}{#2}{#3}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{template definitions}
%
%    \begin{macrocode}
% ------------------------------------------------------------------
% template definitions
% ------------------------------------------------------------------
%    \end{macrocode}
%
%
% \begin{macro}{\SetTemplateDefinition}
%    \begin{macrocode}
\newcommand\SetTemplateDefinition[3]{%
  \csdef{tpl@definition@#1@#2}{#3}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\UseDefinition}
%    \begin{macrocode}
\newcommand\UseDefinition[2]{%
  \ifcsdef{tpl@definition@#1@#2}
    {\csuse{tpl@definition@#1@#2}}
    {\PackageError{templatetools}%
      {Definition #1 -> #2 is unknown\MessageBreak}{}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \iffalse
%</templatetools.sty>
% \fi
%
% \Finale
\endinput
